const { importQueue, embeddingQueue, linkGenerationQueue } = require('./server/queue');

async function testQueues() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π...');
  
  try {
    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    await importQueue.add('test-import', { 
      projectId: 'test-project',
      filePath: '/test/file.csv'
    });
    
    await embeddingQueue.add('test-embedding', {
      blockIds: ['block1', 'block2'],
      projectId: 'test-project'
    });
    
    await linkGenerationQueue.add('test-generation', {
      projectId: 'test-project',
      scenarios: ['orphan-fix']
    });
    
    console.log('‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π
    const importJobs = await importQueue.getJobs(['waiting', 'active']);
    const embeddingJobs = await embeddingQueue.getJobs(['waiting', 'active']);
    const generationJobs = await linkGenerationQueue.getJobs(['waiting', 'active']);
    
    console.log(`üìä –û—á–µ—Ä–µ–¥–∏: Import=${importJobs.length}, Embedding=${embeddingJobs.length}, Generation=${generationJobs.length}`);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    await importQueue.clean(0, 'active');
    await embeddingQueue.clean(0, 'active');
    await linkGenerationQueue.clean(0, 'active');
    
    console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π:', error.message);
  }
}

testQueues().catch(console.error);


