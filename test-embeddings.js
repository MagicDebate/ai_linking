const { EmbeddingService } = require('./server/embeddingService');

async function testEmbeddings() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...');
  
  try {
    const embeddingService = new EmbeddingService();
    
    // –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    const normalized = embeddingService.normalizeText('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å HTML <p>—Ç–µ–≥–∞–º–∏</p>');
    console.log('üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', normalized);
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞
    const hash = embeddingService.generateTextHash('—Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç');
    console.log('üîê –•—ç—à —Ç–µ–∫—Å—Ç–∞:', hash);
    
    // –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const cached = await embeddingService.getCachedEmbedding(hash, 'test-project');
    console.log('üíæ –ö—ç—à:', cached ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
    const embedding = await embeddingService.generateEmbedding('—Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç');
    console.log('üéØ –≠–º–±–µ–¥–¥–∏–Ω–≥:', embedding.length, '—Ä–∞–∑–º–µ—Ä–æ–≤');
    
    // –¢–µ—Å—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
    const vector1 = [1, 0, 0, 0];
    const vector2 = [0, 1, 0, 0];
    const vector3 = [1, 0, 0, 0];
    
    const similarity1 = embeddingService.cosineSimilarity(vector1, vector2);
    const similarity2 = embeddingService.cosineSimilarity(vector1, vector3);
    
    console.log('üìä –°—Ö–æ–¥—Å—Ç–≤–æ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤:', similarity1);
    console.log('üìä –°—Ö–æ–¥—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤:', similarity2);
    
    console.log('‚úÖ –¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:', error.message);
  }
}

testEmbeddings().catch(console.error);



