import { useState, useRef, useEffect } from "react";
import { useRoute, useLocation } from "wouter";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useProjectState } from "@/hooks/useProjectState";
import Layout from "@/components/Layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useToast } from "@/hooks/use-toast";
import {
  Upload,
  FileText,
  Globe,
  CheckCircle2,
  ArrowRight,
  Download,
  AlertCircle,
  ArrowLeft,
  Settings,
  Info,
  Loader2,
  BarChart3,
  Clock,
  Play,
  Database
} from "lucide-react";

interface FieldMapping {
  [key: string]: string;
}

interface CsvPreview {
  headers: string[];
  rows: string[][];
  uploadId?: string;
}

interface Project {
  id: string;
  name: string;
  domain: string;
  status: "QUEUED" | "READY";
  updatedAt: string;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
interface SEOProfile {
  preset: 'basic' | 'ecommerce' | 'freshness' | 'custom';
  
  // –õ–∏–º–∏—Ç—ã
  maxLinks: number;           // 1-10
  minGap: number;            // 50-400 —Å–ª–æ–≤
  exactAnchorPercent: number; // 0-50%
  
  // –°—Ç–æ–ø-–ª–∏—Å—Ç –∏ priority/hub URLs
  stopAnchors: string[];
  priorityPages: string[];    // Money pages for Commercial Routing
  hubPages: string[];        // Hub pages for Head Consolidation
  
  // –°—Ü–µ–Ω–∞—Ä–∏–∏ ON/OFF + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  scenarios: {
    orphanFix: boolean;
    headConsolidation: boolean;
    clusterCrossLink: boolean;
    commercialRouting: boolean;
    depthLift: {
      enabled: boolean;
      minDepth: number; // 3-8
    };
    freshnessPush: {
      enabled: boolean;
      daysFresh: number; // 7-60
      linksPerDonor: number; // 0-3
    };
  };
  
  // –ö–∞–Ω–Ω–∏–±–∞–ª–∏–∑–∞—Ü–∏—è
  cannibalization: {
    threshold: 'low' | 'medium' | 'high'; // 0.75/0.80/0.85
    action: 'block' | 'flag';
    canonicRule: 'length' | 'url' | 'manual'; // –ü–æ –¢–ó: Length/URL/Manual
  };
  
  // –ü–æ–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫
  policies: {
    oldLinks: 'enrich' | 'regenerate' | 'audit';
    removeDuplicates: boolean;
    brokenLinks: 'delete' | 'replace' | 'ignore';
  };
  
  // HTML –∞—Ç—Ä–∏–±—É—Ç—ã
  htmlAttributes: {
    className: string;
    rel: {
      noopener: boolean;
      noreferrer: boolean;
      nofollow: boolean;
    };
    targetBlank: boolean;
    classMode: 'append' | 'replace';
  };
}

const DEFAULT_PROFILE: SEOProfile = {
  preset: 'basic',
  maxLinks: 3,
  minGap: 100,
  exactAnchorPercent: 20,
  stopAnchors: [],
  priorityPages: [],
  hubPages: [],
  scenarios: {
    orphanFix: true,
    headConsolidation: true,
    clusterCrossLink: true,
    commercialRouting: true,
    depthLift: { enabled: true, minDepth: 5 },
    freshnessPush: { enabled: true, daysFresh: 30, linksPerDonor: 1 }
  },
  cannibalization: {
    threshold: 'medium',
    action: 'block',
    canonicRule: 'length'
  },
  policies: {
    oldLinks: 'enrich',
    removeDuplicates: true,
    brokenLinks: 'replace'
  },
  htmlAttributes: {
    className: '',
    rel: { noopener: false, noreferrer: false, nofollow: false },
    targetBlank: false,
    classMode: 'append'
  }
};

const PRESETS = {
  basic: {
    ...DEFAULT_PROFILE,
    scenarios: {
      orphanFix: true,
      headConsolidation: true,
      clusterCrossLink: true,
      commercialRouting: true,
      depthLift: { enabled: true, minDepth: 5 },
      freshnessPush: { enabled: true, daysFresh: 30, linksPerDonor: 1 }
    }
  },
  ecommerce: {
    ...DEFAULT_PROFILE,
    scenarios: {
      orphanFix: true,
      headConsolidation: true,
      clusterCrossLink: false,
      commercialRouting: true,
      depthLift: { enabled: true, minDepth: 4 },
      freshnessPush: { enabled: false, daysFresh: 30, linksPerDonor: 1 }
    }
  },
  freshness: {
    ...DEFAULT_PROFILE,
    scenarios: {
      orphanFix: false,
      headConsolidation: false,
      clusterCrossLink: false,
      commercialRouting: false,
      depthLift: { enabled: false, minDepth: 5 },
      freshnessPush: { enabled: true, daysFresh: 30, linksPerDonor: 1 }
    }
  }
};

export default function ProjectUnifiedSpec() {
  const [, params] = useRoute("/project/:id/*");
  const [location, setLocation] = useLocation();
  const projectId = params?.id;
  const { toast } = useToast();
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ projectId
  console.log('üîç ProjectUnifiedSpec - projectId:', projectId);
  console.log('üîç ProjectUnifiedSpec - params:', params);
  console.log('üîç ProjectUnifiedSpec - location:', location);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–∑ URL
  const getStepFromUrl = () => {
    if (location.includes('/upload')) return 1;
    if (location.includes('/import-progress')) return 2;
    if (location.includes('/seo')) return 3;
    if (location.includes('/generate')) return 4;
    if (location.includes('/draft')) return 5;
    if (location.includes('/publish')) return 6;
    return 1; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —à–∞–≥—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º URL
  const navigateToStep = (step: number) => {
    if (!projectId) {
      console.error('‚ùå ProjectId is undefined, cannot navigate');
      return;
    }
    
    const stepUrls = {
      1: `/project/${projectId}/upload`,
      2: `/project/${projectId}/import-progress`,
      3: `/project/${projectId}/seo`,
      4: `/project/${projectId}/generate`,
      5: `/project/${projectId}/draft`,
      6: `/project/${projectId}/publish`
    };
    
    const targetUrl = stepUrls[step as keyof typeof stepUrls];
    if (targetUrl) {
      setLocation(targetUrl);
      setCurrentStep(step);
    } else {
      console.error('‚ùå Invalid step number:', step);
    }
  };
  const queryClient = useQueryClient();
  const fileRef = useRef<HTMLInputElement>(null);

  // Project state management (checkpoints)
  const { 
    projectState, 
    isLoading: stateLoading, 
    setCurrentStep, 
    setImportJobId, 
    setSeoProfile, 
    setStepData 
  } = useProjectState(projectId);

  // –®–∞–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const determineMaxStep = () => {
    if (!projectState) return 1;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π CSV, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 6
    if (projectState.stepData?.finalCsv) {
      return 6;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 5
    if (projectState.stepData?.draft) {
      return 5;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 4
    if (projectState.stepData?.generationResults) {
      return 4;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å SEO –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 3
    if (projectState.seoProfile && Object.keys(projectState.seoProfile).length > 0) {
      return 3;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 2
    if (projectState.importJobId) {
      return 2;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å CSV –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 1
    if (projectState.stepData?.csvPreview) {
      return 1;
    }
    
    return 1;
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ projectState
  const importJobId = projectState?.importJobId || null;
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: URL > —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ > –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à–∞–≥
  // –ù–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 2
  let currentStep = getStepFromUrl() || projectState?.currentStep || determineMaxStep();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç (importJobId), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ 2
  if (importJobId && currentStep !== 2) {
    console.log('üîç Active import detected, forcing step 2');
    currentStep = 2;
  }
  
  // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const { data: importStatus, isLoading: importStatusLoading } = useQuery({
    queryKey: ['/api/import/status', importJobId],
    queryFn: async () => {
      if (!importJobId) return null;
      const response = await fetch(`/api/import/status/${importJobId}`);
      if (!response.ok) throw new Error('Failed to get import status');
      return response.json();
    },
    enabled: !!importJobId && currentStep === 2,
    refetchInterval: 1000, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –Ω–∞ —à–∞–≥–µ 2
    staleTime: 0, // –î–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
    cacheTime: 0 // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  });

  // –®–∞–≥ 1: CSV –¥–∞–Ω–Ω—ã–µ
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [csvPreview, setCsvPreview] = useState<CsvPreview | null>(null);
  const [fieldMapping, setFieldMapping] = useState<FieldMapping>({});
  
  // –®–∞–≥ 2: SEO –ø—Ä–æ—Ñ–∏–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ projectState —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ª–∏—è–Ω–∏–µ–º
  const seoProfile = projectState?.seoProfile ? { ...DEFAULT_PROFILE, ...projectState.seoProfile } : DEFAULT_PROFILE;
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const { data: project, isLoading: projectLoading, error: projectError } = useQuery({
    queryKey: ['/api/projects', projectId],
    queryFn: async () => {
      console.log('üîç Fetching project:', projectId);
      const response = await fetch(`/api/projects/${projectId}`, {
        credentials: 'include',
        cache: 'no-store' // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∫—ç—à–∏—Ä—É–µ–º
      });
      console.log('üì° Response status:', response.status);
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Project fetch failed:', response.status, errorText);
        throw new Error(`Failed to fetch project: ${response.status} ${errorText}`);
      }
      const data = await response.json();
      console.log('‚úÖ Project loaded:', data);
      return data as Promise<Project>;
    },
    enabled: !!projectId,
    refetchOnWindowFocus: true,
    refetchOnMount: true,
    staleTime: 0 // –î–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
  });

  // –ú—É—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const uploadMutation = useMutation({
    mutationFn: async (file: File) => {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('projectId', projectId!);
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData
      });
      if (!response.ok) throw new Error('Upload failed');
      return response.json();
    },
    onSuccess: async (data) => {
      console.log('Upload success:', data);
      const newCsvPreview = { ...data.preview, uploadId: data.uploadId };
      setCsvPreview(newCsvPreview);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π job –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      let currentJobId = importJobId;
      if (!currentJobId) {
        try {
          const response = await fetch('/api/jobs/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ projectId })
          });
          
          if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ New job created:', result.jobId);
            await setImportJobId(result.jobId);
            currentJobId = result.jobId;
          } else {
            throw new Error('Failed to create job');
          }
        } catch (error) {
          console.error('‚ùå Failed to create job:', error);
          toast({ title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏", description: error.message, variant: "destructive" });
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ jobId
      await setStepData({
        csvPreview: newCsvPreview,
        uploadedFile: uploadedFile ? { name: uploadedFile.name, size: uploadedFile.size } : null
      });
      
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —à–∞–≥–µ 1 –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
      toast({ title: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π." });
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", description: error.message, variant: "destructive" });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
  const mappingMutation = useMutation({
    mutationFn: async (mapping: FieldMapping) => {
      const response = await fetch('/api/field-mapping', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          projectId, 
          fieldMapping: mapping, // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è
          uploadId: csvPreview?.uploadId // –ü–µ—Ä–µ–¥–∞–µ–º uploadId –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        })
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Mapping save failed');
      }
      return response.json();
    },
    onSuccess: async () => {
      console.log('‚úÖ Mapping saved successfully');
      console.log('üîç Current projectId:', projectId);
      console.log('üîç Current location:', location);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
      await setStepData({ fieldMapping });
      
      console.log('‚úÖ Step data saved, starting import');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
      if (csvPreview?.uploadId) {
        try {
          const response = await fetch('/api/import/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              projectId,
              uploadId: csvPreview.uploadId 
            })
          });
          
          if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Import started:', result);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º importJobId –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
            await setImportJobId(result.jobId);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2 (–∏–º–ø–æ—Ä—Ç) –≤ —Ç–æ–º –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            console.log('üîç Navigating to step 2 after import start');
            navigateToStep(2);
            setCurrentStep(2); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ 2
            toast({ title: "–ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å." });
          } else {
            throw new Error('Failed to start import');
          }
        } catch (error) {
          console.error('‚ùå Failed to start import:', error);
          toast({ title: "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", description: error.message, variant: "destructive" });
        }
      } else {
        console.error('‚ùå No uploadId available');
        toast({ title: "–û—à–∏–±–∫–∞", description: "–ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–≥—Ä—É–∑–∫–∏", variant: "destructive" });
      }
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞", description: error.message, variant: "destructive" });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const profileMutation = useMutation({
    mutationFn: async (profile: SEOProfile) => {
      const response = await fetch('/api/seo-profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          projectId, 
          profile 
        })
      });
      if (!response.ok) throw new Error('Profile save failed');
      return response.json();
    },
    onSuccess: async () => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º SEO –ø—Ä–æ—Ñ–∏–ª—å –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
      await setSeoProfile(seoProfile);
      
      toast({ title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!" });
      setCurrentStep(4); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—Å—Ç–∏
      navigateToStep(4);
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞", description: error.message, variant: "destructive" });
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
  const startImportMutation = useMutation({
    mutationFn: async () => {
      console.log('üì§ Starting import with data:', {
        projectId,
        uploadId: csvPreview?.uploadId
      });
      
      const response = await fetch('/api/import/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          projectId,
          uploadId: csvPreview?.uploadId 
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Import start error:', errorData);
        throw new Error(errorData.error || 'Import start failed');
      }
      
      const result = await response.json();
      console.log('‚úÖ Import start response:', result);
      return result;
    },
    onSuccess: async (data) => {
      console.log('üéØ Import started successfully:', data);
      toast({ title: "–ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω!" });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º importJobId –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
      await setImportJobId(data.jobId);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–º–ø–æ—Ä—Ç–∞
      navigateToStep(2);
    },
    onError: (error: any) => {
      console.error('‚ùå Import start error:', error);
      toast({ title: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", description: error.message, variant: "destructive" });
    }
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
  useEffect(() => {
    console.log('üîÑ Import status check:', { 
      importStatus, 
      currentStep, 
      importJobId,
      statusCheck: importStatus?.status 
    });
    
    if (importStatus?.status === 'completed' && currentStep === 2) {
      toast({ title: "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!" });
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
      navigateToStep(3);
    } else if (importStatus && importStatus.status === 'failed' && currentStep === 2) {
      toast({ 
        title: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", 
        description: importStatus.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive" 
      });
    }
  }, [importStatus, currentStep, importJobId, setCurrentStep]);

  // –ú—É—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ —Å –ø–æ–ª–Ω—ã–º SEO –ø—Ä–æ—Ñ–∏–ª–µ–º
  const generateLinksMutation = useMutation({
    mutationFn: async () => {
      console.log('üöÄ Sending full SEO profile to backend:', seoProfile);
      
      const response = await fetch('/api/generate/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectId,
          seoProfile  // Send complete SEO profile with all parameters
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to start generation');
      }
      
      return response.json();
    },
    onSuccess: async (data) => {
      toast({ title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞!" });
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      navigateToStep(5);
    },
    onError: (error: any) => {
      toast({ title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", description: error.message, variant: "destructive" });
    }
  });

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.csv') && !file.name.endsWith('.json')) {
      toast({
        title: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
        description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ JSON —Ñ–∞–π–ª—ã",
        variant: "destructive",
      });
      return;
    }

    setUploadedFile(file);
    setCsvPreview(null);
    setFieldMapping({});
    uploadMutation.mutate(file);
  };

  const updateFieldMapping = async (originalField: string, mappedField: string) => {
    const newMapping = {
      ...fieldMapping,
      [originalField]: mappedField
    };
    setFieldMapping(newMapping);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
    await setStepData({ fieldMapping: newMapping });
  };

  const applyPreset = async (preset: keyof typeof PRESETS) => {
    const newProfile = PRESETS[preset];
    setSeoProfile(newProfile);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
    await setSeoProfile(newProfile);
  };

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (projectState && !stateLoading) {
      console.log('üîÑ Restoring state from checkpoints:', projectState);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (projectState.stepData?.csvPreview && !csvPreview) {
        setCsvPreview(projectState.stepData.csvPreview);
      }
      
      if (projectState.stepData?.fieldMapping && Object.keys(projectState.stepData.fieldMapping).length > 0 && Object.keys(fieldMapping).length === 0) {
        setFieldMapping(projectState.stepData.fieldMapping);
      }
      
      if (projectState.importJobId && !importJobId) {
        setImportJobId(projectState.importJobId);
      }
      
      console.log('‚úÖ State restored successfully');
    }
  }, [projectState, stateLoading, csvPreview, fieldMapping, importJobId]);



  if (projectLoading) {
    return (
      <Layout>
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto">
            <div className="animate-pulse">
              <div className="h-8 bg-gray-200 rounded w-64 mb-6"></div>
              <div className="h-64 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  if (projectError) {
    return (
      <Layout>
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto text-center py-16">
            <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</h1>
            <p className="text-gray-600 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.</p>
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-left">
              <p className="text-sm text-red-700 font-mono break-all">
                {projectError.message}
              </p>
            </div>
            <Button 
              variant="outline" 
              className="mt-4"
              onClick={() => window.location.reload()}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </Button>
          </div>
        </div>
      </Layout>
    );
  }

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç Debug info:', {
    projectId,
    projectLoading,
    projectError,
    project: project ? 'EXISTS' : 'NULL',
    projectData: project
  });

  if (!project) {
    return (
      <Layout>
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto text-center py-16">
            <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p className="text-gray-600">–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.</p>
          </div>
        </div>
      </Layout>
    );
  }

  const steps = [
    { number: 1, title: "–ó–∞–≥—Ä—É–∑–∫–∞ CSV –∏ –º–∞–ø–ø–∏–Ω–≥", description: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö" },
    { number: 2, title: "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞" },
    { number: 3, title: "SEO –ø—Ä–æ—Ñ–∏–ª—å", description: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" },
    { number: 4, title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫", description: "–°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º" },
    { number: 5, title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞", description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫" },
    { number: 6, title: "–ì–æ—Ç–æ–≤—ã–π CSV", description: "–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è" }
  ];

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center gap-4 mb-4">
              <Button variant="ghost" size="sm" onClick={() => window.history.back()}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {(project as Project)?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            </h1>
            <p className="text-gray-600 flex items-center gap-2">
              <Globe className="h-4 w-4" />
              {(project as Project)?.domain || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            </p>
          </div>

          {/* Progress Steps */}
          <div className="mb-8">
            <div className="flex items-center justify-between">
              {steps.map((step, index) => (
                <div key={step.number} className="flex items-center">
                  <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${
                    currentStep >= step.number 
                      ? 'bg-blue-600 border-blue-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-400'
                  }`}>
                    {currentStep > step.number ? (
                      <CheckCircle2 className="h-5 w-5" />
                    ) : (
                      <span className="text-sm font-medium">{step.number}</span>
                    )}
                  </div>
                  {index < steps.length - 1 && (
                    <div className={`w-16 h-0.5 mx-4 ${
                      currentStep > step.number ? 'bg-blue-600' : 'bg-gray-300'
                    }`} />
                  )}
                </div>
              ))}
            </div>
            <div className="mt-4 text-center">
              <h2 className="text-xl font-semibold text-gray-900">
                {steps[currentStep - 1]?.title}
              </h2>
              <p className="text-gray-600 text-sm">
                {steps[currentStep - 1]?.description}
              </p>
            </div>
          </div>

          {/* Step Content */}
          <Card>
            <CardContent className="p-8">
              {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∞–ø–ø–∏–Ω–≥ CSV */}
              {currentStep === 1 && (
                <div className="space-y-6">
                  <div className="text-center space-y-4">
                    <h3 className="text-lg font-medium text-gray-900">
                      –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª
                    </h3>
                    <p className="text-sm text-gray-600">
                      –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: URL, –¢–µ–∫—Å—Ç, meta_title, meta_description, pub_date, lang
                    </p>
                    
                    <div className={`border-2 border-dashed rounded-lg p-8 transition-colors ${
                      uploadMutation.isPending ? 'border-blue-300 bg-blue-50' : 'border-gray-300'
                    }`}>
                      {uploadMutation.isPending ? (
                        <div className="space-y-4">
                          <Loader2 className="h-12 w-12 text-blue-600 mx-auto animate-spin" />
                          <p className="text-blue-600 font-medium">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          <Upload className="h-12 w-12 text-gray-400 mx-auto" />
                          <div>
                            <Button
                              onClick={() => fileRef.current?.click()}
                              disabled={uploadMutation.isPending}
                              size="lg"
                            >
                              –í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª
                            </Button>
                            <p className="text-xs text-gray-500 mt-2">
                              CSV –¥–æ 10MB
                            </p>
                          </div>
                        </div>
                      )}
                      <input
                        ref={fileRef}
                        type="file"
                        accept=".csv"
                        onChange={handleFileSelect}
                        className="hidden"
                        disabled={uploadMutation.isPending}
                      />
                    </div>

                    {uploadedFile && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                        <div className="flex items-center gap-2">
                          <FileText className="h-5 w-5 text-green-600" />
                          <span className="text-sm text-green-800">{uploadedFile.name}</span>
                        </div>
                      </div>
                    )}

                    <div className="mt-6">
                      <a
                        href="data:text/csv;charset=utf-8,url%2Ctitle%2Ccontent%2Cmeta_title%2Cmeta_description%2Cpub_date%2Clang%0A%22%2Fblog%2Fseo-tips%22%2C%22SEO%20%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B%22%2C%22%D0%9F%D0%BE%D0%BB%D0%BD%D0%BE%D0%B5%20%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE...%22%2C%22%D0%9B%D1%83%D1%87%D1%88%D0%B8%D0%B5%20SEO%20%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B%22%2C%22%D0%98%D0%B7%D1%83%D1%87%D0%B8%D1%82%D0%B5%20%D1%8D%D1%84%D1%84%D0%B5%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B5%20SEO%20%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D0%B8%22%2C%222024-01-15%22%2C%22ru%22%0A%22%2Fservices%2Fconsulting%22%2C%22SEO%20%D0%BA%D0%BE%D0%BD%D1%81%D0%B0%D0%BB%D1%82%D0%B8%D0%BD%D0%B3%22%2C%22%D0%9F%D1%80%D0%BE%D1%84%D0%B5%D1%81%D1%81%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9%20SEO%20%D0%BA%D0%BE%D0%BD%D1%81%D0%B0%D0%BB%D1%82%D0%B8%D0%BD%D0%B3...%22%2C%22SEO%20%D0%BA%D0%BE%D0%BD%D1%81%D0%B0%D0%BB%D1%82%D0%B8%D0%BD%D0%B3%20%D0%B4%D0%BB%D1%8F%20%D0%B1%D0%B8%D0%B7%D0%BD%D0%B5%D1%81%D0%B0%22%2C%22%D0%9F%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D0%B5%20%D1%8D%D0%BA%D1%81%D0%BF%D0%B5%D1%80%D1%82%D0%BD%D1%8B%D0%B5%20SEO%20%D1%80%D0%B5%D0%BA%D0%BE%D0%BC%D0%B5%D0%BD%D0%B4%D0%B0%D1%86%D0%B8%D0%B8%22%2C%222024-01-10%22%2C%22ru%22"
                        download="sample_content.csv"
                        className="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-blue-700 bg-blue-50 border border-blue-200 rounded-md hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      >
                        <Download className="h-4 w-4" />
                        –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä CSV
                      </a>
                    </div>

                    {/* –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å CSV */}
                    {csvPreview && (
                      <>
                        <div className="mt-8 pt-8 border-t border-gray-200">
                          <h4 className="text-lg font-medium text-gray-900 mb-4">
                            –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—è CSV
                          </h4>
                          <p className="text-sm text-gray-600 mb-6">
                            –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç: URL, –¢–µ–∫—Å—Ç, meta_title, meta_description, pub_date, lang
                          </p>

                          {/* Preview table */}
                          <div className="bg-gray-50 rounded-lg p-4 mb-6">
                            <h5 className="text-sm font-medium text-gray-900 mb-3">–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:</h5>
                            <div className="overflow-x-auto">
                              <table className="min-w-full text-sm border-collapse">
                                <thead>
                                  <tr className="border-b border-gray-300">
                                    {csvPreview.headers.map((header, index) => (
                                      <th key={index} className="text-left py-3 px-4 font-medium text-gray-700 bg-white border-r border-gray-200">
                                        {header}
                                      </th>
                                    ))}
                                  </tr>
                                </thead>
                                <tbody className="bg-white">
                                  {csvPreview.rows.slice(0, 3).map((row, rowIndex) => (
                                    <tr key={rowIndex} className="border-b border-gray-100">
                                      {row.map((cell, cellIndex) => (
                                        <td key={cellIndex} className="py-3 px-4 text-gray-600 border-r border-gray-100 max-w-xs">
                                          <div className="truncate" title={cell || ''}>
                                            {cell && cell.length > 40 ? `${cell.substring(0, 40)}...` : cell || '‚Äî'}
                                          </div>
                                        </td>
                                      ))}
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </div>

                          {/* Field mapping */}
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {[
                              { key: 'url', label: 'URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã', required: true },
                              { key: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç)', required: true },
                              { key: 'content', label: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã', required: true },
                              { key: 'meta_title', label: 'Meta Title', required: false },
                              { key: 'meta_description', label: 'Meta Description', required: false },
                              { key: 'pub_date', label: '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', required: false },
                              { key: 'lang', label: '–Ø–∑—ã–∫', required: false }
                            ].map((field) => (
                              <div key={field.key} className="space-y-2">
                                <Label htmlFor={field.key} className="text-sm font-medium">
                                  {field.label}
                                  {field.required && <span className="text-red-500 ml-1">*</span>}
                                </Label>
                                <Select
                                  value={fieldMapping[field.key as keyof typeof fieldMapping] || 'none'}
                                  onValueChange={(value) => setFieldMapping(prev => ({ 
                                    ...prev, 
                                    [field.key]: value === 'none' ? '' : value 
                                  }))}
                                >
                                  <SelectTrigger>
                                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="none">–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</SelectItem>
                                    {csvPreview.headers.map((header, index) => (
                                      <SelectItem key={index} value={header}>
                                        {header}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                            ))}
                          </div>
                        </div>
                      </>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
                    <div className="flex justify-center mt-8">
                      <Button
                        onClick={() => {
                          // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ SEO –ø—Ä–æ—Ñ–∏–ª—é
                          mappingMutation.mutate(fieldMapping);
                        }}
                        disabled={!csvPreview || !fieldMapping.url || !fieldMapping.title || !fieldMapping.content || mappingMutation.isPending}
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        {mappingMutation.isPending ? (
                          <>
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                            –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥...
                          </>
                        ) : (
                          <>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç
                            <ArrowRight className="h-4 w-4 ml-2" />
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {/* –°–¢–ê–†–´–ô –ö–û–î –£–î–ê–õ–ï–ù */}
              {false && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—è
                    </h3>
                    <p className="text-sm text-gray-600 mb-6">
                      –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç: URL, –¢–µ–∫—Å—Ç, meta_title, meta_description, pub_date, lang
                    </p>
                  </div>

                  {/* Preview table */}
                  <div className="bg-gray-50 rounded-lg p-4 mb-6">
                    <h4 className="text-sm font-medium text-gray-900 mb-3">–ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö:</h4>
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-sm border-collapse">
                        <thead>
                          <tr className="border-b border-gray-300">
                            {csvPreview?.headers?.map((header, index) => (
                              <th key={index} className="text-left py-3 px-4 font-medium text-gray-700 bg-white border-r border-gray-200">
                                {header}
                              </th>
                            ))}
                          </tr>
                        </thead>
                        <tbody className="bg-white">
                          {csvPreview?.rows?.slice(0, 3).map((row, rowIndex) => (
                            <tr key={rowIndex} className="border-b border-gray-100">
                              {row.map((cell, cellIndex) => (
                                <td key={cellIndex} className="py-3 px-4 text-gray-600 border-r border-gray-100 max-w-xs">
                                  <div className="truncate" title={cell || ''}>
                                    {cell && cell.length > 40 ? `${cell.substring(0, 40)}...` : cell || '‚Äî'}
                                  </div>
                                </td>
                              ))}
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  {/* Field mapping */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900">–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {[
                        { key: 'url', label: 'URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã', required: true },
                        { key: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç)', required: true },
                        { key: 'content', label: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã', required: true },
                        { key: 'meta_title', label: 'Meta Title', required: false },
                        { key: 'meta_description', label: 'Meta Description', required: false },
                        { key: 'pub_date', label: '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', required: false },
                        { key: 'lang', label: '–Ø–∑—ã–∫', required: false }
                      ].map((field) => (
                        <div key={field.key}>
                          <Label htmlFor={field.key} className="flex items-center gap-2">
                            {field.label}
                            {field.required && <span className="text-red-500">*</span>}
                          </Label>
                          <Select
                            value={fieldMapping[field.key] || '__none__'}
                            onValueChange={(value) => updateFieldMapping(field.key, value === '__none__' ? '' : value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="__none__">–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</SelectItem>
                              {csvPreview?.headers?.map((header) => (
                                <SelectItem key={header} value={header}>
                                  {header}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div className="flex justify-between">
                    <Button
                      variant="outline"
                      onClick={() => navigateToStep(1)}
                    >
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      –ù–∞–∑–∞–¥
                    </Button>
                    <Button
                      onClick={() => navigateToStep(2)}
                      disabled={!fieldMapping.url || !fieldMapping.title || !fieldMapping.content}
                    >
                      –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö
                      <ArrowRight className="h-4 w-4 ml-2" />
                    </Button>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 3: –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (SEO-–ø—Ä–æ—Ñ–∏–ª—å) */}
              {currentStep === 3 && csvPreview && (
                <div className="space-y-8">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (SEO-–ø—Ä–æ—Ñ–∏–ª—å)
                    </h3>
                    <p className="text-sm text-gray-600 mb-6">
                      –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é
                    </p>
                  </div>

                  {/* –ü—Ä–µ—Å–µ—Ç—ã */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900">–ü—Ä–µ—Å–µ—Ç—ã</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      {[
                        { key: 'basic' as const, title: '–ë–∞–∑–æ–≤—ã–π', desc: '–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã' },
                        { key: 'ecommerce' as const, title: 'E-commerce', desc: '–ë–µ–∑ –∫—Ä–æ—Å—Å-–ª–∏–Ω–∫–æ–≤' },
                        { key: 'freshness' as const, title: '–°–≤–µ–∂–µ—Å—Ç—å', desc: '–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' },
                        { key: 'custom' as const, title: '–î—Ä—É–≥–æ–µ', desc: '–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞' }
                      ].map((preset) => (
                        <div
                          key={preset.key}
                          className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${
                            seoProfile.preset === preset.key 
                              ? 'border-blue-500 bg-blue-50' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                          onClick={() => {
                            if (preset.key !== 'custom') {
                              applyPreset(preset.key);
                            }
                            setSeoProfile(prev => ({ ...prev, preset: preset.key }));
                          }}
                        >
                          <h5 className={`font-medium ${seoProfile.preset === preset.key ? 'text-blue-900' : 'text-gray-900'}`}>
                            {preset.title}
                          </h5>
                          <p className={`text-sm ${seoProfile.preset === preset.key ? 'text-blue-700' : 'text-gray-600'}`}>
                            {preset.desc}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
                  <div className="space-y-6">
                    <h4 className="font-medium text-gray-900">–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
                    
                    {/* –õ–∏–º–∏—Ç—ã */}
                    <div className="space-y-4">
                      <h5 className="text-sm font-medium text-gray-800">–õ–∏–º–∏—Ç—ã</h5>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                          <Label>–ú–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {seoProfile.maxLinks}</Label>
                          <Slider
                            value={[seoProfile.maxLinks]}
                            onValueChange={([value]) => setSeoProfile(prev => ({ ...prev, maxLinks: value }))}
                            min={1}
                            max={10}
                            step={1}
                            className="mt-2"
                          />
                        </div>
                        
                        <div>
                          <Label>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {seoProfile.minGap} —Å–ª–æ–≤</Label>
                          <Slider
                            value={[seoProfile.minGap]}
                            onValueChange={([value]) => setSeoProfile(prev => ({ ...prev, minGap: value }))}
                            min={50}
                            max={400}
                            step={10}
                            className="mt-2"
                          />
                        </div>
                        
                        <div>
                          <Label>–¢–æ—á–Ω—ã–µ –∞–Ω–∫–æ—Ä—ã: {seoProfile.exactAnchorPercent}%</Label>
                          <Slider
                            value={[seoProfile.exactAnchorPercent]}
                            onValueChange={([value]) => setSeoProfile(prev => ({ ...prev, exactAnchorPercent: value }))}
                            min={0}
                            max={50}
                            step={5}
                            className="mt-2"
                          />
                        </div>
                      </div>
                    </div>

                    {/* –°—Ç–æ–ø-–ª–∏—Å—Ç –∞–Ω–∫–æ—Ä–æ–≤ */}
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="stopAnchors">–°—Ç–æ–ø-–ª–∏—Å—Ç –∞–Ω–∫–æ—Ä–æ–≤</Label>
                        <Textarea
                          id="stopAnchors"
                          value={(seoProfile?.stopAnchors || []).join(', ')}
                          onChange={(e) => {
                            const anchors = e.target.value.split(',').map(s => s.trim()).filter(s => s);
                            setSeoProfile(prev => ({ ...prev, stopAnchors: anchors }));
                          }}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —è–∫–æ—Ä—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                          className="mt-1"
                        />
                      </div>
                    </div>

                    {/* Priority Pages - –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Commercial Routing –≤–∫–ª—é—á–µ–Ω */}
                    {seoProfile?.scenarios?.commercialRouting && (
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="priorityPages">Priority (Money) Pages</Label>
                          <Textarea
                            id="priorityPages"
                            value={(seoProfile?.priorityPages || []).join(', ')}
                            onChange={(e) => {
                              const urls = e.target.value.split(',').map(s => s.trim()).filter(s => s);
                              setSeoProfile(prev => ({ ...prev, priorityPages: urls }));
                            }}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                            className="mt-1"
                          />
                          <p className="text-xs text-gray-500 mt-1">URL —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø—Ä–∏ Commercial Routing. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é.</p>
                        </div>
                      </div>
                    )}

                    {/* Hub Pages - –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Head Consolidation –≤–∫–ª—é—á–µ–Ω */}
                    {seoProfile?.scenarios?.headConsolidation && (
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="hubPages">Hub Pages</Label>
                          <Textarea
                            id="hubPages"
                            value={(seoProfile?.hubPages || []).join(', ')}
                            onChange={(e) => {
                              const urls = e.target.value.split(',').map(s => s.trim()).filter(s => s);
                              setSeoProfile(prev => ({ ...prev, hubPages: urls }));
                            }}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ URL —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                            className="mt-1"
                          />
                          <p className="text-xs text-gray-500 mt-1">–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ/—Ö–∞–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è Head Consolidation. –ú–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV (clusterId, url) –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é.</p>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* –°—Ü–µ–Ω–∞—Ä–∏–∏ */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900">–°—Ü–µ–Ω–∞—Ä–∏–∏</h4>
                    <div className="space-y-4">
                      {/* –ü—Ä–æ—Å—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ */}
                      {[
                        { key: 'orphanFix', title: 'Orphan Fix', desc: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ä–æ—Ç' },
                        { key: 'headConsolidation', title: 'Head Consolidation', desc: '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –≥–ª–∞–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü' },
                        { key: 'clusterCrossLink', title: 'Cluster Cross-Link', desc: '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö' },
                        { key: 'commercialRouting', title: 'Commercial Routing', desc: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã' }
                      ].map((scenario) => (
                        <div key={scenario.key} className="flex items-center justify-between p-4 border rounded-lg">
                          <div>
                            <h5 className="font-medium">{scenario.title}</h5>
                            <p className="text-sm text-gray-600">{scenario.desc}</p>
                          </div>
                          <Switch
                            checked={seoProfile.scenarios[scenario.key as keyof typeof seoProfile.scenarios] as boolean}
                            onCheckedChange={(checked) => setSeoProfile(prev => ({
                              ...prev,
                              scenarios: { ...prev.scenarios, [scenario.key]: checked }
                            }))}
                          />
                        </div>
                      ))}

                      {/* Depth Lift */}
                      <div className="p-4 border rounded-lg">
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <h5 className="font-medium">Depth Lift</h5>
                            <p className="text-sm text-gray-600">–ü–æ–¥–Ω—è—Ç–∏–µ –≥–ª—É–±–æ–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü</p>
                          </div>
                          <Switch
                            checked={seoProfile?.scenarios?.depthLift?.enabled ?? false}
                            onCheckedChange={(checked) => setSeoProfile(prev => ({
                              ...prev,
                              scenarios: { 
                                ...prev.scenarios, 
                                depthLift: { ...prev.scenarios?.depthLift, enabled: checked }
                              }
                            }))}
                          />
                        </div>
                        {seoProfile?.scenarios?.depthLift?.enabled && (
                          <div className="ml-6">
                            <Label htmlFor="minDepth">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞</Label>
                            <Select 
                              value={(seoProfile?.scenarios?.depthLift?.minDepth || 5).toString()} 
                              onValueChange={(value) =>
                                setSeoProfile(prev => ({
                                  ...prev,
                                  scenarios: { 
                                    ...prev.scenarios, 
                                    depthLift: { ...prev.scenarios.depthLift, minDepth: parseInt(value) }
                                  }
                                }))
                              }
                            >
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                {[3,4,5,6,7,8].map(num => (
                                  <SelectItem key={num} value={num.toString()}>{num}</SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                        )}
                      </div>

                      {/* Freshness Push */}
                      <div className="p-4 border rounded-lg">
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <h5 className="font-medium">Freshness Push</h5>
                            <p className="text-sm text-gray-600">–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–µ–∂–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
                          </div>
                          <Switch
                            checked={seoProfile?.scenarios?.freshnessPush?.enabled ?? false}
                            onCheckedChange={(checked) => setSeoProfile(prev => ({
                              ...prev,
                              scenarios: { 
                                ...prev.scenarios, 
                                freshnessPush: { ...prev.scenarios?.freshnessPush, enabled: checked }
                              }
                            }))}
                          />
                        </div>
                        {seoProfile?.scenarios?.freshnessPush?.enabled && (
                          <div className="space-y-4">
                            <div>
                              <Label>–°–≤–µ–∂–µ—Å—Ç—å: {seoProfile?.scenarios?.freshnessPush?.daysFresh || 30} –¥–Ω–µ–π</Label>
                              <Slider
                                value={[seoProfile?.scenarios?.freshnessPush?.daysFresh || 30]}
                                onValueChange={([value]) => setSeoProfile(prev => ({
                                  ...prev,
                                  scenarios: { 
                                    ...prev.scenarios, 
                                    freshnessPush: { ...prev.scenarios?.freshnessPush, daysFresh: value }
                                  }
                                }))}
                                min={7}
                                max={60}
                                step={1}
                                className="mt-2"
                              />
                            </div>
                            <div>
                              <Label>–°—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–Ω–æ—Ä–∞: {seoProfile?.scenarios?.freshnessPush?.linksPerDonor || 1}</Label>
                              <Slider
                                value={[seoProfile?.scenarios?.freshnessPush?.linksPerDonor || 1]}
                                onValueChange={([value]) => setSeoProfile(prev => ({
                                  ...prev,
                                  scenarios: { 
                                    ...prev.scenarios, 
                                    freshnessPush: { ...prev.scenarios?.freshnessPush, linksPerDonor: value }
                                  }
                                }))}
                                min={0}
                                max={3}
                                step={1}
                                className="mt-2"
                              />
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* –ö–∞–Ω–Ω–∏–±–∞–ª–∏–∑–∞—Ü–∏—è */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900 flex items-center gap-2">
                      –ö–∞–Ω–Ω–∏–±–∞–ª–∏–∑–∞—Ü–∏—è
                      <Info className="h-4 w-4 text-gray-500 cursor-help" />
                    </h4>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div>
                        <Label>–ü–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏</Label>
                        <Select
                          value={seoProfile.cannibalization.threshold}
                          onValueChange={(value: 'low' | 'medium' | 'high') => 
                            setSeoProfile(prev => ({ ...prev, cannibalization: { ...prev.cannibalization, threshold: value } }))
                          }
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="low">Low (0.75)</SelectItem>
                            <SelectItem value="medium">Medium (0.80)</SelectItem>
                            <SelectItem value="high">High (0.85)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label>–î–µ–π—Å—Ç–≤–∏–µ</Label>
                        <RadioGroup 
                          value={seoProfile.cannibalization.action}
                          onValueChange={(value: 'block' | 'flag') => 
                            setSeoProfile(prev => ({ ...prev, cannibalization: { ...prev.cannibalization, action: value } }))
                          }
                          className="mt-2"
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="block" id="block" />
                            <Label htmlFor="block">Block</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="flag" id="flag" />
                            <Label htmlFor="flag">Flag only</Label>
                          </div>
                        </RadioGroup>
                      </div>
                      
                      <div>
                        <Label>–ü—Ä–∞–≤–∏–ª–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–æ–Ω–∏–∫–∞</Label>
                        <RadioGroup 
                          value={seoProfile.cannibalization.canonicRule}
                          onValueChange={(value: 'length' | 'url' | 'manual') => 
                            setSeoProfile(prev => ({ ...prev, cannibalization: { ...prev.cannibalization, canonicRule: value } }))
                          }
                          className="mt-2"
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="length" id="length" />
                            <Label htmlFor="length">–ü–æ –ø–æ–ª–Ω–æ—Ç–µ —Ç–µ–∫—Å—Ç–∞</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="url" id="url" />
                            <Label htmlFor="url">–ü–æ URL-—Å—Ç—Ä—É–∫—Ç—É—Ä–µ</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="manual" id="manual" />
                            <Label htmlFor="manual">Manual</Label>
                          </div>
                        </RadioGroup>
                      </div>
                    </div>
                  </div>

                  {/* –ü–æ–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫ */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900">–ü–æ–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫</h4>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div>
                        <Label>Old Links Policy</Label>
                        <Select
                          value={seoProfile.policies.oldLinks}
                          onValueChange={(value: 'enrich' | 'regenerate' | 'audit') => 
                            setSeoProfile(prev => ({ ...prev, policies: { ...prev.policies, oldLinks: value } }))
                          }
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="enrich">Enrich</SelectItem>
                            <SelectItem value="regenerate">Regenerate</SelectItem>
                            <SelectItem value="audit">Audit only</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label>Broken-link Policy</Label>
                        <Select
                          value={seoProfile.policies.brokenLinks}
                          onValueChange={(value: 'delete' | 'replace' | 'ignore') => 
                            setSeoProfile(prev => ({ ...prev, policies: { ...prev.policies, brokenLinks: value } }))
                          }
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="delete">Delete</SelectItem>
                            <SelectItem value="replace">Replace</SelectItem>
                            <SelectItem value="ignore">Ignore</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="flex items-center space-x-2 mt-6">
                        <Switch
                          id="removeDuplicates"
                          checked={seoProfile.policies.removeDuplicates}
                          onCheckedChange={(checked) => 
                            setSeoProfile(prev => ({ ...prev, policies: { ...prev.policies, removeDuplicates: checked } }))
                          }
                        />
                        <Label htmlFor="removeDuplicates">Remove Duplicates</Label>
                      </div>
                    </div>
                  </div>

                  {/* HTML –∞—Ç—Ä–∏–±—É—Ç—ã */}
                  <div className="space-y-4">
                    <h4 className="font-medium text-gray-900">HTML Attributes</h4>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <Label htmlFor="className">className</Label>
                        <Input
                          id="className"
                          value={seoProfile.htmlAttributes.className}
                          onChange={(e) => 
                            setSeoProfile(prev => ({ ...prev, htmlAttributes: { ...prev.htmlAttributes, className: e.target.value } }))
                          }
                          placeholder="–í–≤–µ–¥–∏—Ç–µ CSS –∫–ª–∞—Å—Å"
                          className="mt-1"
                        />
                      </div>
                      
                      <div>
                        <Label>classMode</Label>
                        <RadioGroup 
                          value={seoProfile.htmlAttributes.classMode}
                          onValueChange={(value: 'append' | 'replace') => 
                            setSeoProfile(prev => ({ ...prev, htmlAttributes: { ...prev.htmlAttributes, classMode: value } }))
                          }
                          className="mt-2"
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="append" id="append" />
                            <Label htmlFor="append">Append</Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="replace" id="replace" />
                            <Label htmlFor="replace">Replace</Label>
                          </div>
                        </RadioGroup>
                      </div>
                      
                      <div>
                        <Label>rel –∞—Ç—Ä–∏–±—É—Ç—ã</Label>
                        <div className="space-y-2 mt-2">
                          {[
                            { key: 'noopener', label: 'noopener' },
                            { key: 'noreferrer', label: 'noreferrer' },
                            { key: 'nofollow', label: 'nofollow' }
                          ].map((rel) => (
                            <div key={rel.key} className="flex items-center space-x-2">
                              <Switch
                                id={rel.key}
                                checked={seoProfile.htmlAttributes.rel[rel.key as keyof typeof seoProfile.htmlAttributes.rel]}
                                onCheckedChange={(checked) => 
                                  setSeoProfile(prev => ({ 
                                    ...prev, 
                                    htmlAttributes: { 
                                      ...prev.htmlAttributes, 
                                      rel: { ...prev.htmlAttributes.rel, [rel.key]: checked } 
                                    } 
                                  }))
                                }
                              />
                              <Label htmlFor={rel.key}>{rel.label}</Label>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2 mt-6">
                        <Switch
                          id="targetBlank"
                          checked={seoProfile.htmlAttributes.targetBlank}
                          onCheckedChange={(checked) => 
                            setSeoProfile(prev => ({ ...prev, htmlAttributes: { ...prev.htmlAttributes, targetBlank: checked } }))
                          }
                        />
                        <Label htmlFor="targetBlank">target="_blank"</Label>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-between">
                    <Button
                      variant="outline"
                      onClick={() => navigateToStep(1)}
                    >
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ CSV
                    </Button>
                    <Button
                      onClick={() => profileMutation.mutate(seoProfile)}
                      disabled={profileMutation.isPending || startImportMutation.isPending}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      {profileMutation.isPending ? "–°–æ—Ö—Ä–∞–Ω—è–µ–º..." : 
                       startImportMutation.isPending ? "–ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç..." :
                       "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç"}
                      <ArrowRight className="h-4 w-4 ml-2" />
                    </Button>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
              {currentStep === 2 && (
                <div className="text-center space-y-6">
                  <div className="space-y-4">
                    <Database className="h-16 w-16 text-blue-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                    </h3>
                    <p className="text-gray-600">
                      –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.
                    </p>
                  </div>

                  {importStatusLoading ? (
                    <div className="space-y-4">
                      <Loader2 className="h-8 w-8 animate-spin mx-auto text-blue-600" />
                      <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞...</p>
                    </div>
                  ) : importStatus ? (
                    <div className="space-y-6">
                      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                      <div className="text-xs text-gray-500 bg-gray-100 p-2 rounded">
                        Debug: jobId={importJobId}, status={importStatus.status}, phase={importStatus.phase}, percent={importStatus.percent}%
                      </div>
                      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
                          <span>{importStatus.percent}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-3">
                          <div 
                            className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                            style={{ width: `${importStatus.percent}%` }}
                          />
                        </div>
                      </div>

                      {/* –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ */}
                      <div className="flex items-center gap-3 p-4 bg-blue-50 rounded-lg">
                        <Clock className="h-5 w-5 text-blue-600" />
                        <div>
                          <p className="font-medium text-blue-900">
                            –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {importStatus.phase}
                          </p>
                          {importStatus.status === "running" && (
                            <p className="text-sm text-blue-700">
                              –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
                            </p>
                          )}
                        </div>
                      </div>

                      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                      {importStatus.stats && (
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                          <div className="text-center p-3 bg-gray-50 rounded-lg">
                            <div className="text-2xl font-bold text-blue-600">
                              {importStatus.stats.totalPages || importStatus.pagesTotal || 0}
                            </div>
                            <div className="text-sm text-gray-600">–°—Ç—Ä–∞–Ω–∏—Ü</div>
                          </div>
                          <div className="text-center p-3 bg-gray-50 rounded-lg">
                            <div className="text-2xl font-bold text-green-600">
                              {importStatus.stats.totalBlocks || importStatus.blocksDone || 0}
                            </div>
                            <div className="text-sm text-gray-600">–ë–ª–æ–∫–æ–≤</div>
                          </div>
                          <div className="text-center p-3 bg-gray-50 rounded-lg">
                            <div className="text-2xl font-bold text-purple-600">
                              {importStatus.stats.totalWords || 0}
                            </div>
                            <div className="text-sm text-gray-600">–°–ª–æ–≤</div>
                          </div>
                        </div>
                      )}

                      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                      <div className="flex justify-center gap-4">
                        <Button variant="outline" onClick={() => navigateToStep(1)}>
                          <ArrowLeft className="h-4 w-4 mr-2" />
                          –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ
                        </Button>
                        
                        {importStatus.status === "completed" && (
                          <Button 
                            onClick={() => navigateToStep(3)}
                            className="bg-green-600 hover:bg-green-700"
                          >
                            <ArrowRight className="h-4 w-4 mr-2" />
                            –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º SEO
                          </Button>
                        )}
                        
                        {importStatus.status === "failed" && (
                          <div className="text-center space-y-2">
                            <AlertCircle className="h-8 w-8 text-red-500 mx-auto" />
                            <p className="text-red-600 font-medium">–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞</p>
                            <p className="text-sm text-gray-600">
                              {importStatus.errorMessage || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö"}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <AlertCircle className="h-8 w-8 text-yellow-500 mx-auto" />
                      <p className="text-gray-600">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞</p>
                      <div className="flex justify-center gap-4">
                        <Button variant="outline" onClick={() => navigateToStep(1)}>
                          <ArrowLeft className="h-4 w-4 mr-2" />
                          –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ */}
              {currentStep === 4 && (
                <div className="text-center space-y-6">
                  <div className="space-y-4">
                    <BarChart3 className="h-16 w-16 text-green-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
                    </h3>
                    <p className="text-gray-600">
                      –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
                    </p>
                  </div>

                  <div className="flex justify-center gap-4">
                    <Button variant="outline" onClick={() => navigateToStep(3)}>
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      –ù–∞–∑–∞–¥ –∫ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                    </Button>
                    <Button 
                      onClick={() => generateLinksMutation.mutate()}
                      disabled={generateLinksMutation.isPending}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {generateLinksMutation.isPending ? (
                        <>
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...
                        </>
                      ) : (
                        <>
                          <Play className="h-4 w-4 mr-2" />
                          –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–æ–∫
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ */}
              {currentStep === 5 && (
                <div className="space-y-6">
                  <div className="text-center space-y-4">
                    <FileText className="h-16 w-16 text-orange-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
                    </h3>
                    <p className="text-gray-600">
                      –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π.
                    </p>
                  </div>

                  {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Settings className="h-5 w-5" />
                        –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <Label htmlFor="maxLinks">–ú–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</Label>
                          <Select 
                            value={(seoProfile?.maxLinks || 3).toString()} 
                            onValueChange={(value) =>
                              setSeoProfile(prev => ({ ...prev, maxLinks: parseInt(value) }))
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {[1,2,3,4,5,6,7,8,9,10].map(num => (
                                <SelectItem key={num} value={num.toString()}>{num}</SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div>
                          <Label htmlFor="minGap">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (—Å–ª–æ–≤)</Label>
                          <Select 
                            value={(seoProfile?.minGap || 100).toString()} 
                            onValueChange={(value) =>
                              setSeoProfile(prev => ({ ...prev, minGap: parseInt(value) }))
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {[50,100,150,200,250,300,350,400].map(num => (
                                <SelectItem key={num} value={num.toString()}>{num}</SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div>
                          <Label htmlFor="exactAnchorPercent">–¢–æ—á–Ω—ã–µ –∞–Ω–∫–æ—Ä—ã (%)</Label>
                          <Select 
                            value={(seoProfile?.exactAnchorPercent || 20).toString()} 
                            onValueChange={(value) =>
                              setSeoProfile(prev => ({ ...prev, exactAnchorPercent: parseInt(value) }))
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {[0,5,10,15,20,25,30,35,40,45,50].map(num => (
                                <SelectItem key={num} value={num.toString()}>{num}%</SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* –°—Ü–µ–Ω–∞—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <BarChart3 className="h-5 w-5" />
                        –°—Ü–µ–Ω–∞—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="flex items-center space-x-2">
                          <Switch
                            id="orphanFix"
                            checked={seoProfile?.scenarios?.orphanFix ?? true}
                            onCheckedChange={(checked) =>
                              setSeoProfile(prev => ({
                                ...prev,
                                scenarios: { ...prev.scenarios, orphanFix: checked }
                              }))
                            }
                          />
                          <Label htmlFor="orphanFix">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Ä–æ—Ç</Label>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Switch
                            id="headConsolidation"
                            checked={seoProfile?.scenarios?.headConsolidation ?? true}
                            onCheckedChange={(checked) =>
                              setSeoProfile(prev => ({
                                ...prev,
                                scenarios: { ...prev.scenarios, headConsolidation: checked }
                              }))
                            }
                          />
                          <Label htmlFor="headConsolidation">–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –≥–æ–ª–æ–≤</Label>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Switch
                            id="clusterCrossLink"
                            checked={seoProfile?.scenarios?.clusterCrossLink ?? true}
                            onCheckedChange={(checked) =>
                              setSeoProfile(prev => ({
                                ...prev,
                                scenarios: { ...prev.scenarios, clusterCrossLink: checked }
                              }))
                            }
                          />
                          <Label htmlFor="clusterCrossLink">–ö—Ä–æ—Å—Å-–ª–∏–Ω–∫–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤</Label>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Switch
                            id="commercialRouting"
                            checked={seoProfile?.scenarios?.commercialRouting ?? true}
                            onCheckedChange={(checked) =>
                              setSeoProfile(prev => ({
                                ...prev,
                                scenarios: { ...prev.scenarios, commercialRouting: checked }
                              }))
                            }
                          />
                          <Label htmlFor="commercialRouting">–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Ä–æ—É—Ç–∏–Ω–≥</Label>
                        </div>
                      </div>

                      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 pt-4 border-t">
                        <div>
                          <div className="flex items-center space-x-2 mb-2">
                            <Switch
                              id="depthLift"
                              checked={seoProfile?.scenarios?.depthLift?.enabled ?? false}
                              onCheckedChange={(checked) => setSeoProfile(prev => ({
                                ...prev,
                                scenarios: { 
                                  ...prev.scenarios, 
                                  depthLift: { ...prev.scenarios?.depthLift, enabled: checked }
                                }
                              }))}
                            />
                            <Label htmlFor="depthLift">–ü–æ–¥–Ω—è—Ç–∏–µ –≥–ª—É–±–æ–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü</Label>
                          </div>
                          {seoProfile?.scenarios?.depthLift?.enabled && (
                            <div className="ml-6">
                              <Label htmlFor="minDepth">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞</Label>
                              <Select 
                                value={(seoProfile?.scenarios?.depthLift?.minDepth || 5).toString()} 
                                onValueChange={(value) =>
                                  setSeoProfile(prev => ({
                                    ...prev,
                                    scenarios: { 
                                      ...prev.scenarios, 
                                      depthLift: { ...prev.scenarios.depthLift, minDepth: parseInt(value) }
                                    }
                                  }))
                                }
                              >
                                <SelectTrigger>
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  {[3,4,5,6,7,8].map(num => (
                                    <SelectItem key={num} value={num.toString()}>{num}</SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                          )}
                        </div>
                        
                        <div>
                          <div className="flex items-center space-x-2 mb-2">
                            <Switch
                              id="freshnessPush"
                              checked={seoProfile?.scenarios?.freshnessPush?.enabled ?? false}
                              onCheckedChange={(checked) => setSeoProfile(prev => ({
                                ...prev,
                                scenarios: { 
                                  ...prev.scenarios, 
                                  freshnessPush: { ...prev.scenarios?.freshnessPush, enabled: checked }
                                }
                              }))}
                            />
                            <Label htmlFor="freshnessPush">–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö</Label>
                          </div>
                          {seoProfile?.scenarios?.freshnessPush?.enabled && (
                            <div className="space-y-4">
                              <div>
                                <Label>–°–≤–µ–∂–µ—Å—Ç—å: {seoProfile?.scenarios?.freshnessPush?.daysFresh || 30} –¥–Ω–µ–π</Label>
                                <Slider
                                  value={[seoProfile?.scenarios?.freshnessPush?.daysFresh || 30]}
                                  onValueChange={([value]) => setSeoProfile(prev => ({
                                    ...prev,
                                    scenarios: { 
                                      ...prev.scenarios, 
                                      freshnessPush: { ...prev.scenarios?.freshnessPush, daysFresh: value }
                                    }
                                  }))}
                                  min={7}
                                  max={60}
                                  step={1}
                                  className="mt-2"
                                />
                              </div>
                              <div>
                                <Label>–°—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–Ω–æ—Ä–∞: {seoProfile?.scenarios?.freshnessPush?.linksPerDonor || 1}</Label>
                                <Slider
                                  value={[seoProfile?.scenarios?.freshnessPush?.linksPerDonor || 1]}
                                  onValueChange={([value]) => setSeoProfile(prev => ({
                                    ...prev,
                                    scenarios: { 
                                      ...prev.scenarios, 
                                      freshnessPush: { ...prev.scenarios?.freshnessPush, linksPerDonor: value }
                                    }
                                  }))}
                                  min={0}
                                  max={3}
                                  step={1}
                                  className="mt-2"
                                />
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* –ü–æ–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫ */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <FileText className="h-5 w-5" />
                        –ü–æ–ª–∏—Ç–∏–∫–∏ —Å—Å—ã–ª–æ–∫
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="oldLinks">–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫</Label>
                          <Select 
                            value={seoProfile?.policies?.oldLinks || 'enrich'} 
                            onValueChange={(value: 'enrich' | 'regenerate' | 'audit') =>
                              setSeoProfile(prev => ({ 
                                ...prev, 
                                policies: { ...prev.policies, oldLinks: value }
                              }))
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="enrich">–û–±–æ–≥–∞—Ç–∏—Ç—å</SelectItem>
                              <SelectItem value="regenerate">–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</SelectItem>
                              <SelectItem value="audit">–ê—É–¥–∏—Ç</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div>
                          <Label htmlFor="brokenLinks">–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫</Label>
                          <Select 
                            value={seoProfile?.policies?.brokenLinks || 'replace'} 
                            onValueChange={(value: 'delete' | 'replace' | 'ignore') =>
                              setSeoProfile(prev => ({ 
                                ...prev, 
                                policies: { ...prev.policies, brokenLinks: value }
                              }))
                            }
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="delete">–£–¥–∞–ª–∏—Ç—å</SelectItem>
                              <SelectItem value="replace">–ó–∞–º–µ–Ω–∏—Ç—å</SelectItem>
                              <SelectItem value="ignore">–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <Switch
                          id="removeDuplicates"
                          checked={seoProfile?.policies?.removeDuplicates ?? true}
                          onCheckedChange={(checked) =>
                            setSeoProfile(prev => ({ 
                              ...prev, 
                              policies: { ...prev.policies, removeDuplicates: checked }
                            }))
                          }
                        />
                        <Label htmlFor="removeDuplicates">–£–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫</Label>
                      </div>
                    </CardContent>
                  </Card>

                  {/* –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–æ–≤ */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Clock className="h-5 w-5" />
                        –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–æ–≤
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-center py-8 text-gray-500">
                        <Clock className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                        <p>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–æ–≤ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                        <p className="text-sm">–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
                      </div>
                    </CardContent>
                  </Card>

                  {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                  <div className="flex justify-between">
                    <Button variant="outline" onClick={() => navigateToStep(2)}>
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      –ù–∞–∑–∞–¥ –∫ –∏–º–ø–æ—Ä—Ç—É
                    </Button>
                    <Button 
                      onClick={() => generateLinksMutation.mutate()}
                      disabled={generateLinksMutation.isPending}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      {generateLinksMutation.isPending ? (
                        <>
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...
                        </>
                      ) : (
                        <>
                          <Play className="h-4 w-4 mr-2" />
                          –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–æ–∫
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 6: –ì–æ—Ç–æ–≤—ã–π CSV */}
              {currentStep === 6 && (
                <div className="text-center space-y-6">
                  <div className="space-y-4">
                    <Download className="h-16 w-16 text-green-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      –ì–æ—Ç–æ–≤—ã–π CSV
                    </h3>
                    <p className="text-gray-600">
                      –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç.
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                      <div className="flex items-center gap-3 mb-4">
                        <CheckCircle2 className="h-6 w-6 text-green-600" />
                        <h4 className="text-lg font-medium text-green-900">
                          –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
                        </h4>
                      </div>
                      <p className="text-green-700 mb-4">
                        –í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
                      </p>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                        <div>
                          <div className="text-2xl font-bold text-green-600">150</div>
                          <div className="text-sm text-green-700">–°–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫</div>
                        </div>
                        <div>
                          <div className="text-2xl font-bold text-blue-600">45</div>
                          <div className="text-sm text-blue-700">–°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                        </div>
                        <div>
                          <div className="text-2xl font-bold text-purple-600">12</div>
                          <div className="text-sm text-purple-700">–ê–Ω–∫–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ</div>
                        </div>
                        <div>
                          <div className="text-2xl font-bold text-orange-600">98%</div>
                          <div className="text-sm text-orange-700">–ö–∞—á–µ—Å—Ç–≤–æ</div>
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-center gap-4">
                      <Button variant="outline" onClick={() => navigateToStep(5)}>
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        –ù–∞–∑–∞–¥ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É
                      </Button>
                      <Button 
                        onClick={() => {
                          // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                          toast({ title: "CSV —Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è..." });
                        }}
                        className="bg-green-600 hover:bg-green-700"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        –°–∫–∞—á–∞—Ç—å CSV
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </Layout>
  );
}