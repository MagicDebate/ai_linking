import React, { useState, useRef, useEffect } from "react";
import { useRoute, useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { useProjectState } from "@/hooks/useProjectState";
import { useProjectNavigation } from "@/hooks/useProjectNavigation";
import { useImportStatus } from "@/hooks/useImportStatus";
import { useProjectMutations } from "@/hooks/useProjectMutations";
import { useGeneration, useGenerationProgress } from "@/hooks/useGeneration";
import { ImportProgress } from "@/components/ImportProgress";
import { GenerationProgress } from "@/components/GenerationProgress";
import { SEOSettings, SEOProfile } from "@/components/SEOSettings";
import Layout from "@/components/Layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import {
  Upload,
  FileText,
  Globe,
  CheckCircle2,
  ArrowRight,
  Download,
  AlertCircle,
  ArrowLeft,
  Settings,
  Info,
  Loader2,
  BarChart3,
  Clock,
  Play,
  Database
} from "lucide-react";

interface FieldMapping {
  [key: string]: string;
}

interface CsvPreview {
  headers: string[];
  rows: string[][];
  uploadId?: string;
}

interface Project {
  id: string;
  name: string;
  domain: string;
  status: "QUEUED" | "READY";
  updatedAt: string;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º SEOProfile –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SEOSettings
const DEFAULT_PROFILE: SEOProfile = {
  maxLinks: 3,
  minGap: 100,
  exactAnchorPercent: 20,
  stopAnchors: [],
  priorityPages: [],
  hubPages: [],
  tasks: {
    orphanFix: true,
    headConsolidation: true,
    clusterCrossLink: true,
    commercialRouting: true,
    depthLift: { enabled: true, minDepth: 5 },
    freshnessPush: { enabled: true, daysFresh: 30, linksPerDonor: 1 }
  },
  policies: {
    oldLinks: 'enrich',
    removeDuplicates: true,
    brokenLinks: 'replace'
  },
  htmlAttributes: {
    className: '',
    rel: { noopener: false, noreferrer: false, nofollow: false },
    targetBlank: false,
    classMode: 'append'
  }
};

export default function ProjectFixed() {
  const [, params] = useRoute("/project/:id/*");
  const [location, setLocation] = useLocation();
  const projectId = params?.id;
  const { toast } = useToast();
  
  console.log('üîç ProjectFixed - projectId:', projectId);
  console.log('üîç ProjectFixed - location:', location);
  
  // –•—É–∫–∏
  const { 
    projectState, 
    isLoading: stateLoading, 
    setCurrentStep, 
    setImportJobId, 
    setSeoProfile, 
    setStepData 
  } = useProjectState(projectId);

  // Generation hooks
  const { 
    startGeneration, 
    startGenerationAsync, 
    isStartingGeneration,
  } = useGeneration();

  const { navigateToStep, getCurrentStep } = useProjectNavigation();
  const { uploadMutation, mappingMutation, startImportMutation, generateLinksMutation } = useProjectMutations();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
  const currentStep = getCurrentStep(location);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
  const importJobId = projectState?.importJobId || null;
  const { data: importStatus, isLoading: importStatusLoading } = useImportStatus(importJobId, currentStep);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const { data: generationProgress, isLoading: generationLoading } = useGenerationProgress(generationRunId);
  
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [csvPreview, setCsvPreview] = useState<CsvPreview | null>(null);
  const [fieldMapping, setFieldMapping] = useState<FieldMapping>({});
  const [generationRunId, setGenerationRunId] = useState<string | null>(null);
  const fileRef = useRef<HTMLInputElement>(null);
  
  // SEO –ø—Ä–æ—Ñ–∏–ª—å
  const seoProfile = projectState?.seoProfile ? { ...DEFAULT_PROFILE, ...projectState.seoProfile } : DEFAULT_PROFILE;
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const { data: project, isLoading: projectLoading, error: projectError } = useQuery({
    queryKey: ['/api/projects', projectId],
    queryFn: async () => {
      console.log('üîç Fetching project:', projectId);
      const response = await fetch(`/api/projects/${projectId}`, {
        credentials: 'include',
        cache: 'no-store'
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Project fetch failed:', response.status, errorText);
        throw new Error(`Failed to fetch project: ${response.status} ${errorText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ Project loaded:', data);
      return data as Promise<Project>;
    },
    enabled: !!projectId,
    refetchOnWindowFocus: true,
    refetchOnMount: true,
    staleTime: 0
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.csv') && !file.name.endsWith('.json')) {
      toast({
        title: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç",
        description: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ JSON —Ñ–∞–π–ª—ã",
        variant: "destructive",
      });
      return;
    }

    setUploadedFile(file);
    setCsvPreview(null);
    setFieldMapping({});
    
    uploadMutation.mutate({ file, projectId: projectId! });
  };

  const handleUploadSuccess = async (data: any) => {
    console.log('Upload success:', data);
    const newCsvPreview = { ...data.preview, uploadId: data.uploadId };
    setCsvPreview(newCsvPreview);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await setStepData({
      csvPreview: newCsvPreview,
      uploadedFile: uploadedFile ? { name: uploadedFile.name, size: uploadedFile.size } : null
    });
    
    toast({ title: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π." });
  };

  const handleMappingSubmit = async () => {
    if (!csvPreview?.uploadId) {
      toast({ title: "–û—à–∏–±–∫–∞", description: "–ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–≥—Ä—É–∑–∫–∏", variant: "destructive" });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
    await mappingMutation.mutateAsync({ 
      projectId: projectId!, 
      fieldMapping, 
      uploadId: csvPreview.uploadId 
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–µ–∫–ø–æ–∏–Ω—Ç—ã
    await setStepData({ fieldMapping });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
    const result = await startImportMutation.mutateAsync({ 
      projectId: projectId!, 
      uploadId: csvPreview.uploadId 
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º importJobId
    await setImportJobId(result.jobId);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 2
    await navigateToStep(2, projectId!);
    toast({ title: "–ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å." });
  };

  const handleImportComplete = async () => {
    await navigateToStep(3, projectId!);
  };

  const handleBackToUpload = async () => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ CSV, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    if (!csvPreview) {
      setUploadedFile(null);
      setFieldMapping({});
    }
    await navigateToStep(1, projectId!);
  };

  const handleGenerate = async () => {
    console.log('üöÄ Starting generation with profile:', seoProfile);
    
    try {
      const result = await startGenerationAsync({ 
        projectId: projectId!, 
        seoProfile 
      });
      
      console.log('‚úÖ Generation started:', result);
      setGenerationRunId(result.runId);
      
      toast({ title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞!" });
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      navigateToStep(4, projectId!);
      
    } catch (error) {
      console.error('‚ùå Generation error:', error);
      toast({ 
        title: "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", 
        description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive" 
      });
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
  useEffect(() => {
    if (importStatus?.status === 'completed' && currentStep === 2) {
      console.log('‚úÖ Import completed, navigating to step 3');
      toast({ title: "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!" });
      handleImportComplete();
    } else if (importStatus?.status === 'failed' && currentStep === 2) {
      console.log('‚ùå Import failed:', importStatus.error);
      toast({ 
        title: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", 
        description: importStatus.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive" 
      });
    }
  }, [importStatus, currentStep]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  useEffect(() => {
    if (generationProgress?.status === 'draft' && currentStep === 4) {
      console.log('‚úÖ Generation completed, navigating to step 5');
      toast({ title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß–µ—Ä–Ω–æ–≤–∏–∫ –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–≤—å—é." });
      navigateToStep(5, projectId!);
    } else if (generationProgress?.status === 'failed' && currentStep === 4) {
      console.log('‚ùå Generation failed:', generationProgress.errorMessage);
      toast({ 
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", 
        description: generationProgress.errorMessage || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive" 
      });
    }
  }, [generationProgress, currentStep]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (projectState && !stateLoading) {
      console.log('üîÑ Restoring state from checkpoints:', projectState);
      
      if (projectState.stepData?.csvPreview && !csvPreview) {
        setCsvPreview(projectState.stepData.csvPreview);
      }
      
      if (projectState.stepData?.fieldMapping && Object.keys(projectState.stepData.fieldMapping).length > 0 && Object.keys(fieldMapping).length === 0) {
        setFieldMapping(projectState.stepData.fieldMapping);
      }
      
      if (projectState.importJobId && !importJobId) {
        console.log('üîÑ Restoring importJobId:', projectState.importJobId);
        setImportJobId(projectState.importJobId);
      }
      
      console.log('‚úÖ State restored successfully');
    }
  }, [projectState, stateLoading, csvPreview, fieldMapping, importJobId, setImportJobId]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (uploadMutation.isSuccess && uploadMutation.data) {
      handleUploadSuccess(uploadMutation.data);
    }
  }, [uploadMutation.isSuccess, uploadMutation.data]);

  if (projectLoading) {
    return (
      <Layout>
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto">
            <div className="animate-pulse">
              <div className="h-8 bg-gray-200 rounded w-64 mb-6"></div>
              <div className="h-64 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  if (projectError || !project) {
    return (
      <Layout>
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-4xl mx-auto text-center py-16">
            <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</h1>
            <p className="text-gray-600 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.</p>
            <Button 
              variant="outline" 
              className="mt-4"
              onClick={() => window.location.reload()}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </Button>
          </div>
        </div>
      </Layout>
    );
  }

  const steps = [
    { number: 1, title: "–ó–∞–≥—Ä—É–∑–∫–∞ CSV –∏ –º–∞–ø–ø–∏–Ω–≥", description: "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö" },
    { number: 2, title: "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞" },
    { number: 3, title: "SEO –ø—Ä–æ—Ñ–∏–ª—å", description: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" },
    { number: 4, title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫", description: "–°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º" },
    { number: 5, title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞", description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫" },
    { number: 6, title: "–ì–æ—Ç–æ–≤—ã–π CSV", description: "–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è" }
  ];

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center gap-4 mb-4">
              <Button variant="ghost" size="sm" onClick={() => window.history.back()}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            </h1>
            <p className="text-gray-600 flex items-center gap-2">
              <Globe className="h-4 w-4" />
              {project?.domain || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            </p>
          </div>

          {/* Progress Steps */}
          <div className="mb-8">
            <div className="flex items-center justify-between">
              {steps.map((step, index) => (
                <div key={step.number} className="flex items-center">
                  <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${
                    currentStep >= step.number 
                      ? 'bg-blue-600 border-blue-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-400'
                  }`}>
                    {currentStep > step.number ? (
                      <CheckCircle2 className="h-5 w-5" />
                    ) : (
                      <span className="text-sm font-medium">{step.number}</span>
                    )}
                  </div>
                  {index < steps.length - 1 && (
                    <div className={`w-16 h-0.5 mx-4 ${
                      currentStep > step.number ? 'bg-blue-600' : 'bg-gray-300'
                    }`} />
                  )}
                </div>
              ))}
            </div>
            <div className="mt-4 text-center">
              <h2 className="text-xl font-semibold text-gray-900">
                {steps[currentStep - 1]?.title}
              </h2>
              <p className="text-gray-600 text-sm">
                {steps[currentStep - 1]?.description}
              </p>
            </div>
          </div>

          {/* Step Content */}
          <Card>
            <CardContent className="p-8">
              {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∞–ø–ø–∏–Ω–≥ CSV */}
              {currentStep === 1 && (
                <div className="space-y-6">
                  <div className="text-center space-y-4">
                    <h3 className="text-lg font-medium text-gray-900">
                      –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª
                    </h3>
                    <p className="text-sm text-gray-600">
                      –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: URL, –¢–µ–∫—Å—Ç, meta_title, meta_description, pub_date, lang
                    </p>
                    
                    <div className={`border-2 border-dashed rounded-lg p-8 transition-colors ${
                      uploadMutation.isPending ? 'border-blue-300 bg-blue-50' : 'border-gray-300'
                    }`}>
                      {uploadMutation.isPending ? (
                        <div className="space-y-4">
                          <Loader2 className="h-12 w-12 text-blue-600 mx-auto animate-spin" />
                          <p className="text-blue-600 font-medium">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          <Upload className="h-12 w-12 text-gray-400 mx-auto" />
                          <div>
                            <Button
                              onClick={() => fileRef.current?.click()}
                              disabled={uploadMutation.isPending}
                              size="lg"
                            >
                              –í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª
                            </Button>
                            <p className="text-xs text-gray-500 mt-2">
                              CSV –¥–æ 10MB
                            </p>
                          </div>
                        </div>
                      )}
                      <input
                        ref={fileRef}
                        type="file"
                        accept=".csv"
                        onChange={handleFileSelect}
                        className="hidden"
                        disabled={uploadMutation.isPending}
                      />
                    </div>

                    {uploadedFile && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                        <div className="flex items-center gap-2">
                          <FileText className="h-5 w-5 text-green-600" />
                          <span className="text-sm text-green-800">{uploadedFile.name}</span>
                        </div>
                      </div>
                    )}

                    {/* –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å CSV */}
                    {csvPreview && (
                      <>
                        <div className="mt-8 pt-8 border-t border-gray-200">
                          <h4 className="text-lg font-medium text-gray-900 mb-4">
                            –°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—è CSV
                          </h4>
                          <p className="text-sm text-gray-600 mb-6">
                            –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç: URL, –¢–µ–∫—Å—Ç, meta_title, meta_description, pub_date, lang
                          </p>

                          {/* Field mapping */}
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {[
                              { key: 'url', label: 'URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã', required: true },
                              { key: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç)', required: true },
                              { key: 'content', label: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã', required: true },
                              { key: 'meta_title', label: 'Meta Title', required: false },
                              { key: 'meta_description', label: 'Meta Description', required: false },
                              { key: 'pub_date', label: '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', required: false },
                              { key: 'lang', label: '–Ø–∑—ã–∫', required: false }
                            ].map((field) => (
                              <div key={field.key} className="space-y-2">
                                <Label htmlFor={field.key} className="text-sm font-medium">
                                  {field.label}
                                  {field.required && <span className="text-red-500 ml-1">*</span>}
                                </Label>
                                <Select
                                  value={fieldMapping[field.key as keyof typeof fieldMapping] || 'none'}
                                  onValueChange={(value) => setFieldMapping(prev => ({ 
                                    ...prev, 
                                    [field.key]: value === 'none' ? '' : value 
                                  }))}
                                >
                                  <SelectTrigger>
                                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="none">–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</SelectItem>
                                    {csvPreview.headers.map((header, index) => (
                                      <SelectItem key={index} value={header}>
                                        {header}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                            ))}
                          </div>
                        </div>
                      </>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
                    <div className="flex justify-center mt-8">
                      <Button
                        onClick={handleMappingSubmit}
                        disabled={!csvPreview || !fieldMapping.url || !fieldMapping.title || !fieldMapping.content || mappingMutation.isPending || startImportMutation.isPending}
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        {mappingMutation.isPending || startImportMutation.isPending ? (
                          <>
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                            {mappingMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥...' : '–ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç...'}
                          </>
                        ) : (
                          <>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç
                            <ArrowRight className="h-4 w-4 ml-2" />
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
              {currentStep === 2 && (
                <ImportProgress
                  importStatus={importStatus}
                  isLoading={importStatusLoading}
                  onBack={handleBackToUpload}
                  onNext={handleImportComplete}
                  projectId={projectId!}
                />
              )}

              {/* –®–∞–≥ 3: SEO –ø—Ä–æ—Ñ–∏–ª—å */}
              {currentStep === 3 && (
                <div className="space-y-6">
                  <div className="text-center space-y-4">
                    <Settings className="h-16 w-16 text-green-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      SEO –ø—Ä–æ—Ñ–∏–ª—å
                    </h3>
                    <p className="text-gray-600">
                      –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫.
                    </p>
                  </div>

                  <SEOSettings
                    seoProfile={seoProfile}
                    onProfileChange={(newProfile) => {
                      setSeoProfile(newProfile);
                    }}
                    onGenerate={handleGenerate}
                    isGenerating={isStartingGeneration}
                  />

                  <div className="flex justify-center">
                    <Button variant="outline" onClick={handleBackToUpload}>
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      –ù–∞–∑–∞–¥ –∫ –∏–º–ø–æ—Ä—Ç—É
                    </Button>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ */}
              {currentStep === 4 && (
                <div className="space-y-6">
                  {!generationRunId ? (
                    // –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω - –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
                    <div className="text-center space-y-6">
                      <div className="space-y-4">
                        <BarChart3 className="h-16 w-16 text-green-600 mx-auto" />
                        <h3 className="text-xl font-semibold text-gray-900">
                          –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
                        </h3>
                        <p className="text-gray-600">
                          –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
                        </p>
                      </div>

                      <div className="flex justify-center gap-4">
                        <Button variant="outline" onClick={() => navigateToStep(3, projectId!)}>
                          <ArrowLeft className="h-4 w-4 mr-2" />
                          –ù–∞–∑–∞–¥ –∫ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                        </Button>
                        <Button 
                          onClick={handleGenerate}
                          disabled={isStartingGeneration}
                          className="bg-green-600 hover:bg-green-700"
                        >
                          {isStartingGeneration ? (
                            <>
                              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                              –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...
                            </>
                          ) : (
                            <>
                              <Play className="h-4 w-4 mr-2" />
                              –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–æ–∫
                            </>
                          )}
                        </Button>
                      </div>
                    </div>
                  ) : (
                    // –≠–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    <div className="space-y-6">
                      <div className="flex justify-center">
                        <Button variant="outline" onClick={() => navigateToStep(3, projectId!)}>
                          <ArrowLeft className="h-4 w-4 mr-2" />
                          –ù–∞–∑–∞–¥ –∫ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                        </Button>
                      </div>
                      
                      {generationLoading ? (
                        <div className="text-center space-y-4">
                          <Loader2 className="h-12 w-12 text-blue-600 mx-auto animate-spin" />
                          <p className="text-blue-600 font-medium">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...</p>
                        </div>
                      ) : generationProgress ? (
                        <GenerationProgress
                          runId={generationRunId}
                          status={generationProgress.status}
                          phase={generationProgress.phase}
                          percent={generationProgress.percent}
                          generated={generationProgress.generated}
                          rejected={generationProgress.rejected}
                          taskProgress={generationProgress.taskProgress}
                          counters={generationProgress.counters}
                          startedAt={generationProgress.startedAt}
                          finishedAt={generationProgress.finishedAt}
                          errorMessage={generationProgress.errorMessage}
                        />
                      ) : (
                        <div className="text-center space-y-4">
                          <AlertCircle className="h-12 w-12 text-red-600 mx-auto" />
                          <p className="text-red-600 font-medium">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              )}

              {/* –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ */}
              {currentStep === 5 && (
                <div className="text-center space-y-6">
                  <div className="space-y-4">
                    <FileText className="h-16 w-16 text-orange-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
                    </h3>
                    <p className="text-gray-600">
                      –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π.
                    </p>
                  </div>

                  <div className="flex justify-center gap-4">
                    <Button variant="outline" onClick={() => navigateToStep(4, projectId!)}>
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      –ù–∞–∑–∞–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    </Button>
                    <Button 
                      onClick={() => navigateToStep(6, projectId!)}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      <ArrowRight className="h-4 w-4 mr-2" />
                      –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                    </Button>
                  </div>
                </div>
              )}

              {/* –®–∞–≥ 6: –ì–æ—Ç–æ–≤—ã–π CSV */}
              {currentStep === 6 && (
                <div className="text-center space-y-6">
                  <div className="space-y-4">
                    <Download className="h-16 w-16 text-green-600 mx-auto" />
                    <h3 className="text-xl font-semibold text-gray-900">
                      –ì–æ—Ç–æ–≤—ã–π CSV
                    </h3>
                    <p className="text-gray-600">
                      –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç.
                    </p>
                  </div>

                  <div className="space-y-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                      <div className="flex items-center gap-3 mb-4">
                        <CheckCircle2 className="h-6 w-6 text-green-600" />
                        <h4 className="text-lg font-medium text-green-900">
                          –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
                        </h4>
                      </div>
                      <p className="text-green-700 mb-4">
                        –í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
                      </p>
                    </div>

                    <div className="flex justify-center gap-4">
                      <Button variant="outline" onClick={() => navigateToStep(5, projectId!)}>
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        –ù–∞–∑–∞–¥ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É
                      </Button>
                      <Button 
                        onClick={() => {
                          toast({ title: "CSV —Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è..." });
                        }}
                        className="bg-green-600 hover:bg-green-700"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        –°–∫–∞—á–∞—Ç—å CSV
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </Layout>
  );
}
