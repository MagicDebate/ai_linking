import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { 
  Play, 
  CheckCircle2, 
  XCircle, 
  Clock, 
  AlertCircle,
  FileText,
  Target,
  Link,
  TrendingUp,
  ArrowUp,
  RefreshCw
} from 'lucide-react';

interface TaskProgress {
  percent: number;
  scanned: number;
  candidates: number;
  accepted: number;
  rejected: number;
}

interface GenerationProgressProps {
  runId: string;
  status: 'running' | 'draft' | 'published' | 'failed' | 'canceled';
  phase: string;
  percent: number;
  generated: number;
  rejected: number;
  taskProgress: {
    orphanFix: TaskProgress;
    headConsolidation: TaskProgress;
    clusterCrossLink: TaskProgress;
    commercialRouting: TaskProgress;
    depthLift: TaskProgress;
    freshnessPush: TaskProgress;
  };
  counters: {
    scanned: number;
    candidates: number;
    accepted: number;
    rejected: number;
  };
  startedAt: string;
  finishedAt?: string;
  errorMessage?: string;
}

const taskConfig = {
  orphanFix: {
    title: 'Orphan Fix',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ¬´—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö¬ª —Å—Ç—Ä–∞–Ω–∏—Ü',
    icon: <FileText className="h-4 w-4" />,
    color: 'bg-blue-500'
  },
  headConsolidation: {
    title: 'Head Consolidation',
    description: '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤',
    icon: <Target className="h-4 w-4" />,
    color: 'bg-green-500'
  },
  clusterCrossLink: {
    title: 'Cluster Cross-Link',
    description: '–ü–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤',
    icon: <Link className="h-4 w-4" />,
    color: 'bg-purple-500'
  },
  commercialRouting: {
    title: 'Commercial Routing',
    description: '–ü–µ—Ä–µ–ª–∏–≤ –Ω–∞ Money Pages',
    icon: <TrendingUp className="h-4 w-4" />,
    color: 'bg-orange-500'
  },
  depthLift: {
    title: 'Depth Lift',
    description: '–ü–æ–¥–Ω—è—Ç–∏–µ –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü',
    icon: <ArrowUp className="h-4 w-4" />,
    color: 'bg-indigo-500'
  },
  freshnessPush: {
    title: 'Freshness Push',
    description: '–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–≤–µ–∂–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    icon: <RefreshCw className="h-4 w-4" />,
    color: 'bg-pink-500'
  }
};

export function GenerationProgress({
  runId,
  status,
  phase,
  percent,
  generated,
  rejected,
  taskProgress,
  counters,
  startedAt,
  finishedAt,
  errorMessage
}: GenerationProgressProps) {
  console.log('üîç [GenerationProgress] Component rendered with props:', {
    runId,
    status,
    phase,
    percent,
    generated,
    rejected,
    taskProgress,
    counters,
    startedAt,
    finishedAt,
    errorMessage
  });
  const getStatusIcon = () => {
    switch (status) {
      case 'running':
        return <Play className="h-5 w-5 text-blue-500 animate-pulse" />;
      case 'draft':
        return <CheckCircle2 className="h-5 w-5 text-green-500" />;
      case 'published':
        return <CheckCircle2 className="h-5 w-5 text-green-600" />;
      case 'failed':
        return <XCircle className="h-5 w-5 text-red-500" />;
      case 'canceled':
        return <XCircle className="h-5 w-5 text-gray-500" />;
      default:
        return <Clock className="h-5 w-5 text-gray-500" />;
    }
  };

  const getStatusText = () => {
    switch (status) {
      case 'running':
        return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
      case 'draft':
        return '–ß–µ—Ä–Ω–æ–≤–∏–∫ –≥–æ—Ç–æ–≤';
      case 'published':
        return '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ';
      case 'failed':
        return '–û—à–∏–±–∫–∞';
      case 'canceled':
        return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getPhaseText = () => {
    switch (phase) {
      case 'starting':
        return '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
      case 'analyzing':
        return '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü...';
      case 'generating':
        return '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫...';
      case 'checking_404':
        return '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫...';
      case 'finalizing':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...';
      default:
        return phase;
    }
  };

  return (
    <div className="space-y-6">
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            {getStatusIcon()}
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
            <Badge variant={status === 'running' ? 'default' : status === 'draft' ? 'secondary' : 'outline'}>
              {getStatusText()}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
              <span>{percent}%</span>
            </div>
            <Progress value={percent} className="h-2" />
            <p className="text-sm text-gray-600">{getPhaseText()}</p>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{counters.scanned}</div>
              <div className="text-sm text-gray-600">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">{counters.candidates}</div>
              <div className="text-sm text-gray-600">–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">{counters.accepted}</div>
              <div className="text-sm text-gray-600">–ü—Ä–∏–Ω—è—Ç–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{counters.rejected}</div>
              <div className="text-sm text-gray-600">–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</div>
            </div>
          </div>

          {/* –í—Ä–µ–º—è */}
          <div className="text-sm text-gray-500">
            <div>–ù–∞—á–∞—Ç–æ: {new Date(startedAt).toLocaleString('ru-RU')}</div>
            {finishedAt && (
              <div>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {new Date(finishedAt).toLocaleString('ru-RU')}</div>
            )}
          </div>

          {/* –û—à–∏–±–∫–∞ */}
          {errorMessage && (
            <div className="flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg">
              <AlertCircle className="h-4 w-4 text-red-500" />
              <span className="text-sm text-red-700">{errorMessage}</span>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–∞–º */}
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–¥–∞—á–∞–º</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {Object.entries(taskProgress).map(([taskKey, progress]) => {
            const config = taskConfig[taskKey as keyof typeof taskConfig];
            return (
              <div key={taskKey} className="space-y-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className={`p-1 rounded ${config.color} text-white`}>
                      {config.icon}
                    </div>
                    <div>
                      <div className="font-medium">{config.title}</div>
                      <div className="text-sm text-gray-600">{config.description}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-medium">{progress.percent}%</div>
                    <div className="text-sm text-gray-600">
                      {progress.accepted} / {progress.candidates}
                    </div>
                  </div>
                </div>
                <Progress value={progress.percent} className="h-2" />
                <div className="flex justify-between text-xs text-gray-500">
                  <span>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {progress.scanned}</span>
                  <span>–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {progress.candidates}</span>
                  <span>–ü—Ä–∏–Ω—è—Ç–æ: {progress.accepted}</span>
                  <span>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {progress.rejected}</span>
                </div>
              </div>
            );
          })}
        </CardContent>
      </Card>
    </div>
  );
}
