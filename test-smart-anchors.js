// –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–æ—Ä–æ–≤
import { db } from './server/db.js';
import { linkCandidates, pagesClean } from './shared/schema.js';
import { eq } from 'drizzle-orm';
import OpenAI from 'openai';

const runId = '665e98e4-7c77-452d-add1-f6c56aa7603b';

async function testSmartAnchors() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–æ—Ä–æ–≤...');
  
  try {
    const openai = new OpenAI({ 
      apiKey: process.env.OPENAI_API_KEY_2 || process.env.OPENAI_API_KEY 
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∞
    const pages = await db
      .select()
      .from(pagesClean)
      .limit(5);
    
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    if (pages.length < 2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–Ω–∫–æ—Ä–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    const sourcePage = pages[0];
    const targetPage = pages[1];
    
    console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É: ${sourcePage.url} -> ${targetPage.url}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const sourceContent = extractMainContent(sourcePage.cleanHtml || '');
    const targetTitle = extractTitle(targetPage.cleanHtml || '');
    
    console.log(`üìù –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${sourceContent.substring(0, 200)}...`);
    console.log(`üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ü–µ–ª–∏: ${targetTitle}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∞–Ω–∫–æ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    const foundAnchor = findAnchorInContent(sourceContent, targetTitle);
    if (foundAnchor) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–Ω–∫–æ—Ä –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: "${foundAnchor}"`);
    } else {
      console.log(`‚ö†Ô∏è –ê–Ω–∫–æ—Ä –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI...`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system", 
          content: "–¢—ã SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ù—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º. –õ–∏–±–æ –Ω–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ—Ä–∞–∑—É –≤ —Ç–µ–∫—Å—Ç–µ, –ª–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–∞–∫ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–æ—Ä."
        },
        {
          role: "user", 
          content: `–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:\n"${sourceContent.substring(0, 500)}"\n\n–¢–ï–ú–ê –°–°–´–õ–ö–ò: "${targetTitle}"\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã:\n1. –ù–∞–π–¥–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ—Ä–∞–∑—É –ò–ó –¢–ï–ö–°–¢–ê –¥–ª—è –∞–Ω–∫–æ—Ä–∞\n2. –ò–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–∞–∫ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∞–Ω–∫–æ—Ä–∞\n\n–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n–¢–ò–ü: existing/rewrite\n–ê–ù–ö–û–†: [–∞–Ω–∫–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç]\n–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï: [–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å - –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∞–Ω–∫–æ—Ä–æ–º]`
        }
      ],
      max_tokens: 150,
      temperature: 0.3
    });

    const aiResponse = response.choices[0]?.message?.content?.trim();
    console.log(`ü§ñ –û—Ç–≤–µ—Ç OpenAI:\n${aiResponse}`);
    
    if (aiResponse) {
      const typeMatch = aiResponse.match(/–¢–ò–ü:\s*(existing|rewrite)/i);
      const anchorMatch = aiResponse.match(/–ê–ù–ö–û–†:\s*(.+?)(?:\n|$)/i);
      const sentenceMatch = aiResponse.match(/–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:\s*(.+?)(?:\n|$)/i);
      
      if (anchorMatch) {
        const anchor = anchorMatch[1].trim();
        const type = typeMatch?.[1] || 'existing';
        
        console.log(`üìå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∞–Ω–∫–æ—Ä: "${anchor}" (—Ç–∏–ø: ${type})`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É
        await db.insert(linkCandidates).values({
          runId,
          sourcePageId: sourcePage.id,
          targetPageId: targetPage.id,
          sourceUrl: sourcePage.url,
          targetUrl: targetPage.url,
          anchorText: anchor,
          scenario: 'test',
          similarity: 0.8,
          isRejected: false,
          position: 0,
          cssClass: 'seo-link',
          modifiedSentence: type === 'rewrite' && sentenceMatch ? sentenceMatch[1].trim() : null
        });
        
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

function extractMainContent(html) {
  return html.replace(/<[^>]*>/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()
    .substring(0, 1000);
}

function extractTitle(html) {
  const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
  if (titleMatch) return titleMatch[1].trim();
  
  const h1Match = html.match(/<h1[^>]*>([^<]+)<\/h1>/i);
  if (h1Match) return h1Match[1].replace(/<[^>]*>/g, '').trim();
  
  return '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
}

function findAnchorInContent(content, targetTitle) {
  const contentLower = content.toLowerCase();
  const titleWords = targetTitle.toLowerCase().split(/\s+/).filter(word => word.length > 3);
  
  for (const word of titleWords) {
    if (contentLower.includes(word)) {
      const regex = new RegExp(`\\b[^.]*${word}[^.]*\\b`, 'i');
      const match = content.match(regex);
      if (match && match[0].length < 80) {
        return match[0].trim();
      }
    }
  }
  
  return null;
}

testSmartAnchors();